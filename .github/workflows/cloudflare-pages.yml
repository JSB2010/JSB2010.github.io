name: Cloudflare Pages Deployment

on:
  push:
    branches:
      - modern-redesign-shadcn
  pull_request:
    branches:
      - modern-redesign-shadcn
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set environment variables
        id: set-env-vars
        run: |
          # Set environment variables with default values
          echo "NEXT_PUBLIC_APPWRITE_ENDPOINT=https://nyc.cloud.appwrite.io/v1" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_APPWRITE_PROJECT_ID=6816ef35001da24d113d" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_APPWRITE_DATABASE_ID=contact-form-db" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_APPWRITE_COLLECTION_ID=contact-submissions" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_APPWRITE_BUCKET_ID=default-bucket" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_APPWRITE_FUNCTION_ID=contact-email-notification" >> $GITHUB_ENV

          # Override with secrets if available
          if [[ -n "${{ secrets.NEXT_PUBLIC_APPWRITE_ENDPOINT }}" ]]; then
            echo "NEXT_PUBLIC_APPWRITE_ENDPOINT=${{ secrets.NEXT_PUBLIC_APPWRITE_ENDPOINT }}" >> $GITHUB_ENV
          fi
          if [[ -n "${{ secrets.NEXT_PUBLIC_APPWRITE_PROJECT_ID }}" ]]; then
            echo "NEXT_PUBLIC_APPWRITE_PROJECT_ID=${{ secrets.NEXT_PUBLIC_APPWRITE_PROJECT_ID }}" >> $GITHUB_ENV
          fi
          if [[ -n "${{ secrets.NEXT_PUBLIC_APPWRITE_DATABASE_ID }}" ]]; then
            echo "NEXT_PUBLIC_APPWRITE_DATABASE_ID=${{ secrets.NEXT_PUBLIC_APPWRITE_DATABASE_ID }}" >> $GITHUB_ENV
          fi
          if [[ -n "${{ secrets.NEXT_PUBLIC_APPWRITE_COLLECTION_ID }}" ]]; then
            echo "NEXT_PUBLIC_APPWRITE_COLLECTION_ID=${{ secrets.NEXT_PUBLIC_APPWRITE_COLLECTION_ID }}" >> $GITHUB_ENV
          fi
          if [[ -n "${{ secrets.NEXT_PUBLIC_APPWRITE_BUCKET_ID }}" ]]; then
            echo "NEXT_PUBLIC_APPWRITE_BUCKET_ID=${{ secrets.NEXT_PUBLIC_APPWRITE_BUCKET_ID }}" >> $GITHUB_ENV
          fi
          if [[ -n "${{ secrets.NEXT_PUBLIC_APPWRITE_FUNCTION_ID }}" ]]; then
            echo "NEXT_PUBLIC_APPWRITE_FUNCTION_ID=${{ secrets.NEXT_PUBLIC_APPWRITE_FUNCTION_ID }}" >> $GITHUB_ENV
          fi

      - name: Build project
        run: npm run build:cache
        env:
          NEXT_PUBLIC_APPWRITE_ENDPOINT: ${{ env.NEXT_PUBLIC_APPWRITE_ENDPOINT }}
          NEXT_PUBLIC_APPWRITE_PROJECT_ID: ${{ env.NEXT_PUBLIC_APPWRITE_PROJECT_ID }}
          NEXT_PUBLIC_APPWRITE_DATABASE_ID: ${{ env.NEXT_PUBLIC_APPWRITE_DATABASE_ID }}
          NEXT_PUBLIC_APPWRITE_COLLECTION_ID: ${{ env.NEXT_PUBLIC_APPWRITE_COLLECTION_ID }}
          NEXT_PUBLIC_APPWRITE_BUCKET_ID: ${{ env.NEXT_PUBLIC_APPWRITE_BUCKET_ID }}
          NEXT_PUBLIC_APPWRITE_FUNCTION_ID: ${{ env.NEXT_PUBLIC_APPWRITE_FUNCTION_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-output
          path: out/
          retention-days: 1

  # This job only runs if Cloudflare secrets are available and we're not in a PR
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/modern-redesign-shadcn'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: out

      - name: Check if Cloudflare secrets exist
        id: check-secrets
        run: |
          if [[ -n "${{ secrets.CLOUDFLARE_API_TOKEN }}" && -n "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]]; then
            echo "secrets_exist=true" >> $GITHUB_OUTPUT
          else
            echo "secrets_exist=false" >> $GITHUB_OUTPUT
            echo "::warning::Cloudflare API token or Account ID not set. Skipping deployment."
          fi

      - name: Deploy to Cloudflare Pages
        if: steps.check-secrets.outputs.secrets_exist == 'true'
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy out --project-name=jacob-barkin-portfolio
