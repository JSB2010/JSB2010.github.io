name: Performance Monitoring

on:
  # Run on schedule (once per day)
  schedule:
    - cron: '0 0 * * *'  # Every day at midnight UTC
  
  # Allow manual triggering
  workflow_dispatch:
  
  # Run after each production deployment
  deployment:
    branches:
      - main

jobs:
  monitor-performance:
    runs-on: ubuntu-latest
    name: Monitor Site Performance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run performance monitoring
        run: node scripts/monitor-performance.js
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      
      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports
          path: performance-metrics/
      
      - name: Check performance thresholds
        run: |
          # Simple script to check if performance is below threshold
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          const metricsDir = path.join(process.cwd(), 'performance-metrics');
          const files = fs.readdirSync(metricsDir).filter(f => f.startsWith('metrics-') && f.endsWith('.json'));
          
          if (files.length === 0) {
            console.log('No metrics files found');
            process.exit(1);
          }
          
          // Get latest metrics file
          const latestFile = files.sort().pop();
          const metrics = JSON.parse(fs.readFileSync(path.join(metricsDir, latestFile), 'utf8'));
          
          // Check performance thresholds
          const PERF_THRESHOLD = 80;
          const LCP_THRESHOLD = 3000;
          const CLS_THRESHOLD = 0.15;
          
          let failed = false;
          
          for (const [page, data] of Object.entries(metrics.pages)) {
            if (data.error) continue;
            
            if (data.performance < PERF_THRESHOLD) {
              console.log(`⚠️ ${page} performance score (${Math.round(data.performance)}%) is below threshold (${PERF_THRESHOLD}%)`);
              failed = true;
            }
            
            if (data.largestContentfulPaint > LCP_THRESHOLD) {
              console.log(`⚠️ ${page} LCP (${(data.largestContentfulPaint/1000).toFixed(2)}s) is above threshold (${LCP_THRESHOLD/1000}s)`);
              failed = true;
            }
            
            if (data.cumulativeLayoutShift > CLS_THRESHOLD) {
              console.log(`⚠️ ${page} CLS (${data.cumulativeLayoutShift.toFixed(3)}) is above threshold (${CLS_THRESHOLD})`);
              failed = true;
            }
          }
          
          if (failed) {
            console.log('❌ Performance check failed. See HTML report for details.');
            process.exit(1);
          } else {
            console.log('✅ All performance checks passed!');
          }
          "

      - name: Send notification on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: alerts
          SLACK_COLOR: danger
          SLACK_TITLE: Performance monitoring failed
          SLACK_MESSAGE: 'Performance thresholds not met. Check the GitHub Action for details.'
          SLACK_FOOTER: 'Jacob Barkin Portfolio'
